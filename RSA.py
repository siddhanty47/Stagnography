import gmpy2
from gmpy2 import mpz

#f = open("input.txt","r")
#m = f.read()

def RSA_encrypt(m):
	p = 446087557183758429571151706402101809886208632412859901111991219963404685792820473369112545269003989026153245931124316702395758705693679364790903497461147071065254193353938124978226307947312410798874869040070279328428810311754844108094878252494866760969586998128982645877596028979171536962503068429617331702184750324583009171832104916050157628886606372145501702225925125224076829605427173573964812995250569412480720738476855293681666712844831190877620606786663862190240118570736831901886479225810414714078935386562497968178729127629594924411960961386713946279899275006954917139758796061223803393537381034666494402951052059047968693255388647930440925104186817009640171764133172418132836351
	q = 259117086013202627776246767922441530941818887553125427303974923161874019266586362086201209516800483406550695241733194177441689509238807017410377709597512042313066624082916353517952311186154862265604547691127595848775610568757931191017711408826252153849035830401185072116424747461823031471398340229288074545677907941037288235820705892351068433882986888616658650280927692080339605869308790500409503709875902119018371991620994002568935113136548829739112656797303241986517250116412703509705427773477972349821676443446668383119322540099648994051790241624056519054483690809616061625743042361721863339415852426431208737266591962061753535748892894599629195183082621860853400937932839420261866586142503251450773096274235376822938649407127700846077124211823080804139298087057504713825264571448379371125032081826126566649084251699453951887789613650248405739378594599444335231188280123660406262468609212150349937584782292237144339628858485938215738821232393687046160677362909315071
	i=0
	inp=''
	for i in m:
		#print(ord(i))
		if(len(str(ord(i))) == 2):	
			inp+= "0"+str(ord(i))
		elif(len(str(ord(i))) == 1):
			inp+= "00"+str(ord(i))
		else:
			inp+= str(ord(i))
	m = inp
		

	p,q,m = map(mpz,(p,q,m))              # Make sure that m <= p*q

	n = p*q
	phi = (p-1)*(q-1)

	# Finding e

	e = gmpy2.next_prime(max(p,q))
	#e = int(input())

	d = gmpy2.invert(e,phi)               # invert(e, phi) returns d such that e * d == 1 modulo phi, or 0 if no such y exists
	if(d==0):
		return("RSA encryption not possible for these parameters")
	else:
		c = gmpy2.powmod(m,e,n)                    # Encrypted message

	
	return str(c)




def RSA_decrypt(encryption):
	p = 446087557183758429571151706402101809886208632412859901111991219963404685792820473369112545269003989026153245931124316702395758705693679364790903497461147071065254193353938124978226307947312410798874869040070279328428810311754844108094878252494866760969586998128982645877596028979171536962503068429617331702184750324583009171832104916050157628886606372145501702225925125224076829605427173573964812995250569412480720738476855293681666712844831190877620606786663862190240118570736831901886479225810414714078935386562497968178729127629594924411960961386713946279899275006954917139758796061223803393537381034666494402951052059047968693255388647930440925104186817009640171764133172418132836351
	q = 259117086013202627776246767922441530941818887553125427303974923161874019266586362086201209516800483406550695241733194177441689509238807017410377709597512042313066624082916353517952311186154862265604547691127595848775610568757931191017711408826252153849035830401185072116424747461823031471398340229288074545677907941037288235820705892351068433882986888616658650280927692080339605869308790500409503709875902119018371991620994002568935113136548829739112656797303241986517250116412703509705427773477972349821676443446668383119322540099648994051790241624056519054483690809616061625743042361721863339415852426431208737266591962061753535748892894599629195183082621860853400937932839420261866586142503251450773096274235376822938649407127700846077124211823080804139298087057504713825264571448379371125032081826126566649084251699453951887789613650248405739378594599444335231188280123660406262468609212150349937584782292237144339628858485938215738821232393687046160677362909315071


	c = encryption
	p,q,c = map(mpz,(p,q,c)) 
	n = p*q
	phi = (p-1)*(q-1)
	e = gmpy2.next_prime(max(p,q))
	d = gmpy2.invert(e,phi) 
	mssg = gmpy2.powmod(c,d,n)

	out=''
	i=0
	mssg = str(mssg)
	if(mssg[0]!='1'):
		out+=  chr(int(mssg[i]+mssg[i+1]))
		i=2

	while(i<len(mssg)-1):
	

		t = chr(int(mssg[i]+mssg[i+1]+mssg[i+2]))
		out+=t
		i+=3

	return out


	


